version: '3.8'

services:
  # ===== DATABASES =====
  
  # PostgreSQL for User Service
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5432:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Carbon Credit Service
  carbon-db:
    image: postgres:15-alpine
    container_name: carbon-db
    environment:
      POSTGRES_DB: carbon_credit_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5433:5432"
    volumes:
      - carbon_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Marketplace Service
  marketplace-db:
    image: postgres:15-alpine
    container_name: marketplace-db
    environment:
      POSTGRES_DB: marketplace_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5434:5432"
    volumes:
      - marketplace_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Payment Service
  payment-db:
    image: postgres:15-alpine
    container_name: payment-db
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5435:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Verification Service
  verification-db:
    image: postgres:15-alpine
    container_name: verification-db
    environment:
      POSTGRES_DB: verification_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5436:5432"
    volumes:
      - verification_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Notification Service
  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
    ports:
      - "5437:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for EV Data Service
  ev-mongodb:
    image: mongo:7
    container_name: ev-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secret123}
      MONGO_INITDB_DATABASE: ev_data_db
    ports:
      - "27017:27017"
    volumes:
      - ev_mongodb_data:/data/db
    networks:
      - carbon-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for Reporting Service
  reporting-mongodb:
    image: mongo:7
    container_name: reporting-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secret123}
      MONGO_INITDB_DATABASE: reporting_db
    ports:
      - "27018:27017"
    volumes:
      - reporting_mongodb_data:/data/db
    networks:
      - carbon-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Notifications Queue
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secret123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - carbon-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secret123}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - carbon-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== MICROSERVICES =====

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DB_HOST: user-db
      DB_PORT: 5432
      DB_NAME: user_service_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
    ports:
      - "3001:3001"
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # EV Data Service
  ev-data-service:
    build:
      context: ./services/ev-data-service
      dockerfile: Dockerfile
    container_name: ev-data-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      MONGODB_URI: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-secret123}@ev-mongodb:27017/ev_data_db?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
    ports:
      - "3002:3002"
    depends_on:
      ev-mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/ev-data-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Carbon Credit Service
  carbon-credit-service:
    build:
      context: ./services/carbon-credit-service
      dockerfile: Dockerfile
    container_name: carbon-credit-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      DB_HOST: carbon-db
      DB_PORT: 5432
      DB_NAME: carbon_credit_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
      EV_DATA_SERVICE_URL: http://ev-data-service:3002
    ports:
      - "3003:3003"
    depends_on:
      carbon-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/carbon-credit-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Marketplace Service
  marketplace-service:
    build:
      context: ./services/marketplace-service
      dockerfile: Dockerfile
    container_name: marketplace-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3004
      DB_HOST: marketplace-db
      DB_PORT: 5432
      DB_NAME: marketplace_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
      CARBON_CREDIT_SERVICE_URL: http://carbon-credit-service:3003
    ports:
      - "3004:3004"
    depends_on:
      marketplace-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/marketplace-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3005
      DB_HOST: payment-db
      DB_PORT: 5432
      DB_NAME: payment_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
      MARKETPLACE_SERVICE_URL: http://marketplace-service:3004
      PAYMENT_GATEWAY_KEY: ${PAYMENT_GATEWAY_KEY:-test-key-12345}
    ports:
      - "3005:3005"
    depends_on:
      payment-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/payment-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Verification Service
  verification-service:
    build:
      context: ./services/verification-service
      dockerfile: Dockerfile
    container_name: verification-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3006
      DB_HOST: verification-db
      DB_PORT: 5432
      DB_NAME: verification_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
      CARBON_CREDIT_SERVICE_URL: http://carbon-credit-service:3003
      EV_DATA_SERVICE_URL: http://ev-data-service:3002
    ports:
      - "3006:3006"
    depends_on:
      verification-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/verification-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3007
      DB_HOST: notification-db
      DB_PORT: 5432
      DB_NAME: notification_db
      DB_USER: ${POSTGRES_USER:-admin}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secret123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      EMAIL_SERVICE: ${EMAIL_SERVICE:-smtp}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-your-app-password}
    ports:
      - "3007:3007"
    depends_on:
      notification-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Reporting Service
  reporting-service:
    build:
      context: ./services/reporting-service
      dockerfile: Dockerfile
    container_name: reporting-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3008
      MONGODB_URI: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-secret123}@reporting-mongodb:27017/reporting_db?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      USER_SERVICE_URL: http://user-service:3001
      CARBON_CREDIT_SERVICE_URL: http://carbon-credit-service:3003
      MARKETPLACE_SERVICE_URL: http://marketplace-service:3004
    ports:
      - "3008:3008"
    depends_on:
      reporting-mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/reporting-service:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  # AI Service (Python/FastAPI)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: ai-service
    environment:
      ENVIRONMENT: ${NODE_ENV:-development}
      PORT: 3009
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secret123}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-secret123}@rabbitmq:5672
      MARKETPLACE_SERVICE_URL: http://marketplace-service:3004
    ports:
      - "3009:3009"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - carbon-network
    volumes:
      - ./services/ai-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 3009 --reload
    restart: unless-stopped

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-service
      - ev-data-service
      - carbon-credit-service
      - marketplace-service
      - payment-service
      - verification-service
      - notification-service
      - reporting-service
      - ai-service
    networks:
      - carbon-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      REACT_APP_API_URL: http://localhost/api
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - carbon-network
    restart: unless-stopped

# ===== NETWORKS =====
networks:
  carbon-network:
    driver: bridge
    name: carbon-network

# ===== VOLUMES =====
volumes:
  # PostgreSQL volumes
  user_db_data:
  carbon_db_data:
  marketplace_db_data:
  payment_db_data:
  verification_db_data:
  notification_db_data:
  
  # MongoDB volumes
  ev_mongodb_data:
  reporting_mongodb_data:
  
  # Redis volume
  redis_data:
  
  # RabbitMQ volume
  rabbitmq_data:
